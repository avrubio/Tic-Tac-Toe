* {
  margin: 0 auto;
  font-size: 16px;
  font-family: "ComputerSpeakv03Regular";
  font-weight: normal;
  font-style: normal;
}

/* define a custom property named --gradient-angle */
/* this property will store an angle value for gradients */
@property --gradient-angle {
  /* Specify the expected syntax for the value (angle in this case) */
  syntax: "<angle>";

  /* Set the initial value of the property to 0 degrees */
  initial-value: 0deg;

  /* Indicate that the property should not inherit its value */
  inherits: false;
}
:root {
  --clr-1: #69b2ca;
  --clr-2: #75a9b1;
  --clr-3: #59a5b4;
  --clr-4: #66bbc4;
  --clr-5: #a2c1a5;
}
body {
  background: var(--clr-2);
  min-height: 80vh;
  display: grid;
  place-content: center;
}
h1 {
  text-align: center;
  margin-bottom: 70px;
  font-size: 3rem;
  margin-top: 20px;
  color: white;
}
table {
  height: 60vh;
  aspect-ratio: 1 / 1.5;
  /* background: var(--clr-1); */
  border-radius: 0.5rem;
  position: relative;
  width: 37.5rem; /* Adjust the width as needed */
  margin: 0 auto; /* Center the background container horizontally */
  padding: 20px;
}

table::before,
table::after {
  content: "";
  position: absolute;
  inset: -0.5rem;
  z-index: -1;
  background: conic-gradient(
    from var(--gradient-angle),
    rgba(0, 0, 255, 0.5),
    rgba(157, 0, 255, 0.5),
    /* rgba(255, 0, 251, 0.5),
    rgba(255, 0, 55, 0.7),
    rgba(255, 0, 0, 0.5),
    rgba(255, 132, 0, 0.7),
    rgba(242, 255, 0, 0.5),
    rgba(132, 255, 0, 0.7),
    rgba(0, 255, 191, 0.5), */
      rgba(0, 234, 255, 0.5),
    rgba(0, 47, 255, 0.5)
  );
  border-radius: inherit;
  animation: rotation 20s linear infinite;
}

table::after {
  filter: blur(3.5rem);
}

@keyframes rotation {
  0% {
    --gradient-angle: 0deg;
  }
  100% {
    --gradient-angle: 360deg;
  }
}

.buttons {
  position: relative;
  right: -545px;
  text-align: center;
  top: -100px;
}

#themeChanger {
  position: relative;
  bottom: -130px;
  /* right: 100px; */
}

#light,
#dark {
  text-decoration: none;
  background-color: black;
}
/* The switch - the box around the slider  from w3schools*/
.switch {
  position: relative;
  display: inline-block;
  width: 60px;
  height: 34px;
  bottom: -140px;
}

/* Hide default HTML checkbox */
.switch input {
  opacity: 0;
  width: 0;
  height: 0;
}

/* The slider */
.slider {
  position: absolute;
  cursor: pointer;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: #ccc;
  -webkit-transition: 0.4s;
  transition: 0.4s;
}

.slider:before {
  position: absolute;
  content: "";
  height: 26px;
  width: 26px;
  left: 4px;
  bottom: 4px;
  background-color: white;
  -webkit-transition: 0.4s;
  transition: 0.4s;
}

input:checked + .slider {
  background-color: #2196f3;
}

input:focus + .slider {
  box-shadow: 0 0 1px #2196f3;
}

input:checked + .slider:before {
  -webkit-transform: translateX(26px);
  -ms-transform: translateX(26px);
  transform: translateX(26px);
}

.container {
  display: flex;
  flex-direction: column;
  align-items: center;
}
.row,
.row2,
.row3 {
  /* border: black 2px solid; */
  display: flex;
  flex-direction: row;
  height: 200px;
}
.box {
  border: white 0.1px solid;
  border-radius: 5px;
  /* box-shadow: 0 0 5px 5px rgba(10, 254, 104, 0.3);
   */
  /* animation: gradientAnimation 5s infinite linear; */
  box-shadow: 0 0 10px 5px transparent;
  width: 30px;
  display: flex;
  flex-direction: row;
  width: 200px;
}

.scoreTitle {
  /* border: solid black 2px; */
  /* padding: 100px 100px; */
  text-align: center;
  position: relative;
  right: -550px;
  bottom: 300px;
}
.scoreBorder {
  /* border: solid black 2px; */
  background-color: var(--clr-1);
  padding: 50px 100px;
  padding: 3em 6.25em;
  position: relative;
  right: -550px;
  bottom: 400px;
  aspect-ratio: 1 / 1.5;
  background: var(--clr-1);
  border-radius: 0.5rem;
  position: relative;
  margin: 0 auto;
}

.scoreBorder::after,
.scoreBorder::before {
  content: "";
  position: absolute;
  inset: -0.5rem;
  z-index: -1;
  background: conic-gradient(
    from var(--gradient-angle),
    rgba(0, 0, 255, 0.5),
    rgba(157, 0, 255, 0.5),
    /* rgba(255, 0, 251, 0.5),
    rgba(255, 0, 55, 0.7),
    rgba(255, 0, 0, 0.5),
    rgba(255, 132, 0, 0.7),
    rgba(242, 255, 0, 0.5),
    rgba(132, 255, 0, 0.7),
    rgba(0, 255, 191, 0.5), */
      rgba(0, 234, 255, 0.5),
    rgba(0, 47, 255, 0.5)
  );
  border-radius: inherit;
  animation: rotation 20s linear infinite;
}
.scoreBorder::after {
  filter: blur(3.5rem);
}

.scoreBoxO {
  border: solid white 2px;
  padding: 27px 37px;
  position: absolute;
  right: 10px;
  bottom: 50px;
}

.scoreBoxX {
  border: solid white 2px;
  /* padding: 40px 40px; */
  padding: 27px 37px;
  position: absolute;
  right: 112px;
  bottom: 50px;
  /* border: solid white 2px;
  padding: 27px 37px;
  position: absolute;
  right: 112px;
  bottom: 50px; */
}
#playerO {
  right: -51px;
  bottom: -60px;
  position: relative;
}
#playerX {
  right: 49px;
  bottom: -35px;
  position: relative;
}

.scoreTitle {
  position: absolute;
  /* padding-bottom: 40px; */
  /* top: -130px; */
  color: white;
  font-size: 19px;
  right: 40px;
  bottom: 170px;
}

.x:after {
  padding-left: 58px;
  padding-top: 50px;
  content: "‚ùé";
  font-size: 90px;
  color: #fff;
  line-height: 100px;
  text-align: center;
}

.o:after {
  padding-left: 58px;
  padding-top: 50px;
  content: "üÖæÔ∏è";
  font-size: 90px;
  color: blue;
  line-height: 1;
  text-align: center;
}

/* For Mobile Portrait View */
@media screen and (max-device-width: 480px) and (orientation: portrait) {
  table {
    width: 10px;
    height: 20px;
    /* background-color: red; */
    color: #fff;
  }

  h1 {
    font-size: 18px;
    text-align: center;
  }
  .row,
  .row2,
  .row3 {
    /* border: black 2px solid; */
    display: flex;
    flex-direction: row;
    height: 80px;
  }
  .box {
    /* border: black 2px solid; */
    /* box-shadow: 0 0 5px 5px rgba(10, 254, 104, 0.3);
     */
    animation: gradientAnimation 5s infinite linear;
    box-shadow: 0 0 10px 5px transparent;

    display: flex;
    flex-direction: row;
    width: 80px;
  }
  .x:after {
    padding-left: 18px;
    padding-top: 10px;
    content: "‚ùé";
    font-size: 40px;
    color: #fff;
    line-height: 50px;
    text-align: center;
  }

  .o:after {
    padding-left: 18px;
    padding-top: 35px;
    content: "üÖæÔ∏è";
    font-size: 40px;
    color: blue;
    line-height: 1px;
    text-align: center;
  }

  /* The switch - the box around the slider  from w3schools*/
  .switch {
    position: relative;
    display: inline-block;
    width: 3.75em;
    height: 34px;
    bottom: -100px;
  }

  /* Hide default HTML checkbox */
  .switch input {
    opacity: 0;
    width: 0;
    height: 0;
  }

  /* The slider */
  .slider {
    position: absolute;
    cursor: pointer;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: #ccc;
    -webkit-transition: 0.4s;
    transition: 0.4s;
  }

  .slider:before {
    position: absolute;
    content: "";
    height: 26px;
    width: 26px;
    left: 4px;
    bottom: 4px;
    background-color: white;
    -webkit-transition: 0.4s;
    transition: 0.4s;
  }

  .buttons {
    /* position: relative; */
    right: 3px;
    text-align: center;
    top: 270px;
  }

  .scoreBorder {
    /* border: solid black 2px; */
    background-color: var(--clr-1);
    padding: 50px 100px;
    position: relative;
    right: 0px;
    bottom: 30px;
    /* aspect-ratio: 1 / 1.5; */
    background: var(--clr-1);
    border-radius: 0.5rem;
    position: relative;
    margin: 0 auto;
  }

  .scoreBorder::after,
  .scoreBorder::before {
    content: "";
    position: absolute;
    inset: -0.5rem;
    z-index: -1;
    background: conic-gradient(
      from var(--gradient-angle),
      rgba(0, 0, 255, 0.5),
      rgba(157, 0, 255, 0.5),
      /* rgba(255, 0, 251, 0.5),
      rgba(255, 0, 55, 0.7),
      rgba(255, 0, 0, 0.5),
      rgba(255, 132, 0, 0.7),
      rgba(242, 255, 0, 0.5),
      rgba(132, 255, 0, 0.7),
      rgba(0, 255, 191, 0.5), */
        rgba(0, 234, 255, 0.5),
      rgba(0, 47, 255, 0.5)
    );
    border-radius: inherit;
    animation: rotation 20s linear infinite;
  }
  .scoreBorder::after {
    filter: blur(3.5rem);
  }
}
